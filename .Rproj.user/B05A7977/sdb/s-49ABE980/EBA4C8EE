{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Practical Machine Learning - Course Project\"\nauthor: \"David Junor\"\ndate: \"November 4, 2016\"\noutput: html_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, cache = TRUE) \n```\n\n## Introduction & Background\n\"Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement ??? a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset). \"\n\nThe purpose of this project is to predict the manner in which individuals did the exercise using any of the variables in the data set to predict with.  \n\n## Load Libraries\n```{r Load Libraries, echo=TRUE, warning=FALSE, message=FALSE}\nlibrary(caret)\nlibrary(randomForest)\nlibrary(rpart)\nlibrary(e1071)\nlibrary(foreach)\nlibrary(doParallel)\n```\n## Reproducability\n```{r Set Seed}\nset.seed(12345)\n```\n## Load the Data\n```{r Set Working Directory}\nsetwd(\"~/DataScienceSpecialization/PracticalMachineLearning/CourseProject\")\n```\n```{r Training Data}\ntrainUrl <- \"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\"\n```\n\n```{r Testing Data}\ntestUrl <- \"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\"\n```\n\n```{r Load into Memory}\ntraining <- read.csv(url(trainUrl),na.strings=c(\"NA\",\"#DIV/0!\",\"\"))\ntesting <- read.csv(url(testUrl),na.strings=c(\"NA\",\"#DIV/0!\",\"\"))\n```\n## Data Cleaning\nAll blank values converted to \"NA\" and the columns containing \"NA\" removed from both the training and testing data sets.  Columns 1 through 7 contain no usefull information and are removed from both data sets.\n```{r Clean Data}\ntraining <- training[, colSums(is.na(training)) == 0]\ntesting <- testing[, colSums(is.na(testing)) == 0]\n\ntraining <- training[, -c(1:7)]\ntesting <- testing[, -c(1:7)]\n```\n\n## Create Validation Data Set for Cross Validation\n```{r Create Validation Data}\ninTrain <- createDataPartition(training$classe, p = 0.75, list = FALSE)\ntrain <- training[inTrain, ]\nvalid <- training[-inTrain, ]\n```\n\n## Create Prediction Algorithm Using Random Forest\n```{r Prediction Algorithm}\nregisterDoParallel()\n\nclasse <- train$classe\nvariables <- train[-ncol(train)]\n\nfit_rf <- foreach(ntree=rep(250, 4), .combine=randomForest::combine, .packages='randomForest') %dopar% {\nrandomForest(variables, classe, ntree=ntree) \n}\n\nprint(fit_rf, digits = 4)\n```\n\n## Assess Accuracy and Sample Error\n\n#### Training Data Accuracy\n```{r Predict Training Data}\npredictTraining <- predict(fit_rf, train)\nconfusionMatrix(predictTraining, train$classe)\n```\n\n#### Validation Data Acccuracy\n```{r Predict Validation Data}\npredictValidation <- predict(fit_rf, valid)\nconfusionMatrix(predictValidation, valid$classe)\n```\n## Results\nThe random forest method produced a validation accuracy of 0.995 with an out of sample error rate of 0.005.  This compares to the training accuracy of 1 and an out of sample error rate of 0.0.\n\nGiven the high accuracy of the random forest model on both the training and validation data it will be used to predict the 20 test cases.\n\n\n## Apply the Prediction Model\n```{r Apply Prediction to Test data set}\nfeature_set <- colnames(training)\nevaluation_data <- testing\n\nx <- evaluation_data\nx <- x[feature_set[feature_set!='classe']]\ncases <- predict(fit_rf, newdata=x)\n\ncases\n```",
    "created" : 1478369348759.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1633599312",
    "id" : "EBA4C8EE",
    "lastKnownWriteTime" : 1478373130,
    "last_content_update" : 1478373130819,
    "path" : "~/DataScienceSpecialization/PracticalMachineLearning/CourseProject/CourseProjectV03.Rmd",
    "project_path" : "CourseProjectV03.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}